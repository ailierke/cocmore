<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-4.0.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
						http://www.springframework.org/schema/cache 
						http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
						http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- mvc包中DispatcherServlet.propertities会默认加载一些默认的配置 如果我们在配置文件中重定义就会使用我们配置的。 
		我们配置的HandlerMapping 我们配置的HandlerAdapter 我们配置的ViewResolver 默认的LocaleResolver注册 
		默认的ThemeResolver注册 异常处理解析器ExceptionResolver -->
	<!-- 启用注解，并定义组件查找规则 ，mvc层只负责扫描@Controller -->
	<context:component-scan base-package="com.yunzo.cocmore.core.function" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 资源访问处理器 -->
	<mvc:resources mapping="/static/**" location="/WEB-INF/static/" />
	<mvc:resources mapping="/function/**" location="/function/" />
	
	
	<!-- 开启aspectj 必须使用proxy-target-class="true" -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 视图处理器 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/function/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- servlet适配器，这里可以不配置，spring默认会初始化此adapter -->
	<bean id="servletHandlerAdapter" class="org.springframework.web.servlet.handler.SimpleServletHandlerAdapter" />

	<!-- 定义文件上传处理器 -->
		<bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
   				 <property name="maxUploadSize" value="100000"/>
   				 <property name="defaultEncoding" value="UTF-8"/>
   				 <property name="uploadTempDir" value="fileUpload/temp"/>
		</bean>

	<!-- 异常处理器 -->
	<bean id="exceptionResolver" class="com.yunzo.cocmore.core.baseinit.COC_SimpleMappingExceptionResolver">
		<property name="defaultErrorView" value="common_error" />
		<property name="exceptionAttribute" value="exception" />
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.RuntimeException">common_error</prop>
			</props>
		</property>
	</bean>
	
	
	<!-- 定义公共参数初始化拦截器 拦截器实现 -->
	<bean id="initInterceptor" class="com.yunzo.cocmore.core.baseinit.COC_InitializingInterceptor" />
	<!-- 定义性能监控 拦截器 -->
	<bean id="watchHandlerInterceptor" class="com.yunzo.cocmore.core.baseinit.WatchHandlerInterceptor" />

	<!-- 定义本地化变更拦截器 -->
	<bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
		
	<!-- 定义app访问拦截器 -->
	<bean id="cOC_CheckSign" class="com.yunzo.cocmore.core.baseinit.COC_CheckSign" />

	<!-- 请求拦截器，每一个用户请求都会被拦截 -->
	<mvc:interceptors>
		<!-- 全局 -->
		<ref bean="watchHandlerInterceptor" />
		<ref bean="localeChangeInterceptor" />
		<ref bean="initInterceptor" />
		<mvc:interceptor>
			<mvc:mapping path="/mobileapi/*/*" />
			<mvc:exclude-mapping path="/mobileapi/user/*" />
			<ref bean="cOC_CheckSign" />
		</mvc:interceptor>
	</mvc:interceptors>


	<!-- 定义注解驱动Controller方法处理适配器 ,注：该适配器必须声明在<mvc:annotation-driven />之前，否则会使用默认HandlerMappingHandlerAdapter，不能正常处理参数类型的转换 -->
	<!--Spring3.1开始的注解 HandlerMappingHandlerAdapter -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<!-- 请求参数或者返回参数的转换规则 添加-->
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" />
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" >
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<!-- 本地化资源处理器 -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />

	<!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册放在此注解前面，使用我们声明的不自动注册默认的 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages" />
		<property name="fileEncodings" value="utf-8" />
		<property name="cacheSeconds" value="120" />
	</bean>
	<!-- 
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		会添加默认的 
		自定义数据绑定格式转换
		<property name="formatters">
			<list>
				<bean class="org.example.MyFormatter" />
			</list>
		</property>
		自定义http请求参数格式转换
		<property name="converters">
			<list>
				<bean></bean>
			</list>
		</property>
	</bean> -->

	<!-- 会自动注册RequestMappingHandlerMapping与RequestMappingHandlerAdapter,conversionService（数据的自动绑定转换） 
		两个bean,是spring MVC为@Controllers分发请求所必须的。 并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson） -->
	<!--添加数据转绑定转换器 ，JSR-303校验器-->
	<mvc:annotation-driven  validator="validator" />
	<!-- <mvc:annotation-driven conversion-service="conversionService" validator="validator" /> -->
</beans>